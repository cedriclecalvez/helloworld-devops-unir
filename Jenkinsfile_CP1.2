pipeline {
    agent any
   
    stages {
        stage('Clone Repo') {
            steps {
                script {
                    logEnvironment()
                }
                git url: 'https://github.com/cedriclecalvez/helloworld-devops-unir'
            }
        }
      
      
        stage('Run Tests') {
            parallel{
                stage('Unit Tests') {
                    steps {
                        catchError(buildResult:'UNSTABLE',stageResult:'FAILURE'){
                            bat 'python -m pytest --junitxml=result-unit.xml test\\unit'
                            junit 'result-unit.xml'
                        }
                    }
                } 
                stage('Tests Coverage') {
                    steps {
                        catchError(buildResult:'UNSTABLE',stageResult:'FAILURE'){
                            bat '''
                            python -m coverage run --branch --source=app --omit=app\\__init__.py,app\\api.py -m pytest test\\unit
                            coverage xml                           
                            '''
                            cobertura coberturaReportFile:'**\\coverage.xml', conditionalCoverageTargets:'100,0,80',lineCoverageTargets:'100,0,90'
                        }
                    }
                } 
                stage('Static Analysis') {
                    steps {
                        bat '''
                        python -m flake8 --exit-zero --format=pylint app >flake8.out
                        '''
                        recordIssues tools: [flake8(name: 'Flake8', pattern: 'flake8.out')], qualityGates: [[threshold: 10, type: 'TOTAL', unstable: true], [threshold: 11, type: 'TOTAL', unstable: false]]
                    }
                } 
                stage('Security Analysis') {
                    steps {
                        bat '''
                        bandit -r app --exit-zero  -f xml -o bandit-report.xml
                        '''
                        recordIssues tools: [bandit(name: 'Bandit', pattern: 'bandit-report.xml')], qualityGates: [[threshold: 1, type: 'TOTAL', unstable: true]]
                    }
                } 
            }
        }
        
    }
    post {
        always {
            archiveArtifacts artifacts: '**/*.xml **/*.out', fingerprint: true
            
            archiveArtifacts artifacts: '**/result-*.xml', fingerprint: true
            archiveArtifacts artifacts: '**/flake8.out', fingerprint: true
            archiveArtifacts artifacts: '**/bandit-report.xml', fingerprint: true
}

            echo 'Cleaning done and artifacts archived.'
        }
        success {
            cleanWs()

            echo 'Pipeline completed successfully!'
        }
        failure {
            cleanWs()

            echo 'Pipeline failed.'
        }
    }
}
def logEnvironment() {
    bat 'whoami'
    bat 'hostname'
    bat 'echo %WORKSPACE%'
    bat 'dir'
}