pipeline {
    agent any
    environment {
        VIRTUAL_ENV = '.venv'
    }
    stages {
        stage('Clone Repo') {
            steps {
                git url: 'https://github.com/cedriclecalvez/helloworld-devops-unir'
            }
        }
        stage('Setup Virtual Environment') {
            steps {
                bat 'python -m venv ${VIRTUAL_ENV}'
            }
        }
        // stage('Install Dependencies') {
        //     steps {
        //         bat 'call ${VIRTUAL_ENV}\\Scripts\\activate.bat && python -m pip install --upgrade pip && pip install pytest coverage flake8'
        //     }
        // }
        stage('Run Tests') {
            parallel{
                stage('Unit Tests') {
                    steps {
                        catchError(buildResult:'UNSTABLE',stageResult:'FAILURE'){
                            bat 'python -m pytest --junitxml=result-unit.xml test\\unit'
                            junit 'result-unit.xml'
                        }
                    }
                } 
                stage('Tests Coverage') {
                    steps {
                        catchError(buildResult:'UNSTABLE',stageResult:'FAILURE'){
                            bat '''
                            call %VIRTUAL_ENV%\\Scripts\\activate.bat   && %VIRTUAL_ENV%\\Scripts\\python -m coverage run --branch --source=app --omit=app\\__init__.py,app\\api.py -m pytest test\\unit   && coverage xml
                           
                            '''
                            cobertura coberturaReportFile:'**\\coverage.xml', conditionalCoverageTargets:'100,0,80',lineCoverageTargets:'100,0,90'
                        }
                    }
                } 
                stage('Tests Static') {
                    steps {
                        
                            bat '''call %VIRTUAL_ENV%\\Scripts\\activate.bat
                            python -m flake8 --exit-zero --format=pylint app >flake8.out'''
                            recordIssues tools: [flake8(name: 'Flake8', pattern: 'flake8.out')], qualityGates: [[threshold: 10, type: 'TOTAL', unstable: true], [threshold: 11, type: 'TOTAL', unstable: false]]
                        
                    }
                } 
            }
        }
        
    }
    post {
        always {
            archiveArtifacts artifacts: '**/result-*.xml', fingerprint: true
            cleanWs()
            echo 'Cleaning done and artifacts archived.'
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed.'
        }
    }
}