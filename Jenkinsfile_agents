pipeline {
    agent any
    options {
        skipDefaultCheckout() 
    }
    stages {
        stage('Clone Repo') {
            steps {
                cleanWs()
                script {
                    logEnvironment()
                }
                git url: 'https://github.com/cedriclecalvez/helloworld-devops-unir'
                stash name: 'get_code', includes: '**'
            }
        }
        stage('Run Tests') {
            parallel {
                stage('Unit Tests') {
                    agent {
                        label 'agent_unit_test'
                    }
                    steps {
                        script {
                            logEnvironment()
                        }
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                            unstash name:'get_code'  
                            bat '''
                                coverage run --branch --source=app --omit=app/__init__.py,app/api.py -m pytest --junitxml=result-unit.xml test/unit
                                coverage xml
                            '''
                            junit 'result-unit.xml'
                            stash name: 'unit_test_results', includes: 'result-unit.xml'
                            stash name: 'coverage_results', includes: 'coverage.xml'

                        }
                    }
                } 
                stage('Test Coverage') {
                    agent {
                        label 'agent_unit_test'
                    }
                    steps {
                        script {
                            logEnvironment()
                        }
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                            cobertura coberturaReportFile: 'coverage.xml', conditionalCoverageTargets: '100,90,80', lineCoverageTargets: '100,95,85', onlyStable: false
                        }
                    }
                }
                stage('Static Analysis') {
                    agent {
                        label 'agent_static_analysis'
                    }
                    steps {
                        unstash name: 'get_code'
                        script {
                            logEnvironment()
                        }
                        bat '''
                            python -m flake8 --exit-zero --format=pylint app >flake8.out
                        '''
                        recordIssues tools: [flake8(name: 'Flake8', pattern: 'flake8.out')],qualityGates: [[threshold: 8, type: 'TOTAL',unstable: true],[threshold: 10, type: 'TOTAL', unstable: false]]
                        stash name: 'flake8_results', includes: 'flake8.out'
                    }
                } 
                stage('Security Analysis') {
                    agent {
                        label 'agent_security_analysis'
                    }
                    steps {
                        unstash name: 'get_code'
                        script {
                            logEnvironment()
                        }
                        bat '''
                            bandit --exit-zero -r . -f custom -o bandit.out --msg-template "{abspath}:{line}: [{test_id}]: {msg}"
                        '''
                        recordIssues tools: [pyLint(name: 'Bandit', pattern: 'bandit.out')],
                                     qualityGates: [[threshold: 2, type: 'TOTAL', unstable: true], 
                                                    [threshold: 4, type: 'TOTAL', unstable: false]]
                    }
                } 
                stage('Start Flask API') {
                    agent {
                        label 'agent_performance'
                    }
                    steps {
                        script {
                            logEnvironment()
                        }
                        catchError(buildResult: 'SUCCESS', stageResult: 'ABORTED') {
                            timeout(time: 120, unit: 'SECONDS') { 
                                echo 'Starting Flask service in background...'
                                bat '''
                                    set FLASK_APP=app\\api.py
                                    set PYTHONPATH=.
                                    python -m flask run --host=0.0.0.0 --port=5000
                                '''
                            }
                        }
                    }
                }
                stage('Performance Tests') {
                    agent {
                        label 'agent_performance'
                    }
                    steps {
                        unstash name: 'get_code'
                        script {
                            logEnvironment()

                            echo 'Starting JMeter...'
                            bat '''
                                cd "C:\\Program Files\\apache-jmeter-5.6.3\\bin"
                                jmeter -n -t "%WORKSPACE%\\test\\jmeter\\flask.jmx" -f -l "%WORKSPACE%\\flask.jtl"
                            '''
                            echo 'JMeter execution finished.'
                        }
                        perfReport sourceDataFiles: 'flask.jtl'
                        stash name: 'flask_results', includes: 'flask.jtl'
                    }
                     post{
                        always{
                            cleanWs()
                        }
                    }
                } 
            }
        }
    }
    post {
        always {
            unstash 'unit_test_results' 
            unstash 'coverage_results' 
            unstash 'flake8_results' 
            unstash 'flask_results' 
            archiveArtifacts artifacts: '**/*.xml, **/*.out, **/*.jtl', fingerprint: true
            echo 'Artifacts archived.'
            cleanWs()

        }
        success {
            cleanWs()
            echo 'Pipeline completed successfully!'
        }
        failure {
            cleanWs()
            echo 'Pipeline failed.'
        }
    }
}

def logEnvironment() {
    bat 'whoami'
    bat 'hostname'
    bat 'echo %WORKSPACE%'
    bat 'dir'
}
